/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RadioCountMsg'
 * message type.
 */

public class RadioCountMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 19;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new RadioCountMsg of size 19. */
    public RadioCountMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RadioCountMsg of the given data_length. */
    public RadioCountMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg with the given data_length
     * and base offset.
     */
    public RadioCountMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg using the given byte array
     * as backing store.
     */
    public RadioCountMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public RadioCountMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RadioCountMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg embedded in the given message
     * at the given base offset.
     */
    public RadioCountMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RadioCountMsg embedded in the given message
     * at the given base offset and length.
     */
    public RadioCountMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RadioCountMsg> \n";
      try {
        s += "  [num_pkts=0x"+Long.toHexString(get_num_pkts())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pkt=";
        for (int i = 0; i < 2; i++) {
          s += "0x"+Long.toHexString(getElement_pkt(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [isNACK=0x"+Long.toHexString(get_isNACK())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [coeff=0x"+Long.toHexString(get_coeff())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ts=0x"+Long.toHexString(get_ts())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nackeff=0x"+Long.toHexString(get_nackeff())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [source=0x"+Long.toHexString(get_source())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dest=0x"+Long.toHexString(get_dest())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: num_pkts
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'num_pkts' is signed (false).
     */
    public static boolean isSigned_num_pkts() {
        return false;
    }

    /**
     * Return whether the field 'num_pkts' is an array (false).
     */
    public static boolean isArray_num_pkts() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'num_pkts'
     */
    public static int offset_num_pkts() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'num_pkts'
     */
    public static int offsetBits_num_pkts() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'num_pkts'
     */
    public short get_num_pkts() {
        return (short)getUIntBEElement(offsetBits_num_pkts(), 8);
    }

    /**
     * Set the value of the field 'num_pkts'
     */
    public void set_num_pkts(short value) {
        setUIntBEElement(offsetBits_num_pkts(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'num_pkts'
     */
    public static int size_num_pkts() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'num_pkts'
     */
    public static int sizeBits_num_pkts() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pkt
    //   Field type: int[], unsigned
    //   Offset (bits): 8
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pkt' is signed (false).
     */
    public static boolean isSigned_pkt() {
        return false;
    }

    /**
     * Return whether the field 'pkt' is an array (true).
     */
    public static boolean isArray_pkt() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'pkt'
     */
    public static int offset_pkt(int index1) {
        int offset = 8;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pkt'
     */
    public static int offsetBits_pkt(int index1) {
        int offset = 8;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'pkt' as a int[]
     */
    public int[] get_pkt() {
        int[] tmp = new int[2];
        for (int index0 = 0; index0 < numElements_pkt(0); index0++) {
            tmp[index0] = getElement_pkt(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'pkt' from the given int[]
     */
    public void set_pkt(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_pkt(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'pkt'
     */
    public int getElement_pkt(int index1) {
        return (int)getUIntBEElement(offsetBits_pkt(index1), 16);
    }

    /**
     * Set an element of the array 'pkt'
     */
    public void setElement_pkt(int index1, int value) {
        setUIntBEElement(offsetBits_pkt(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'pkt'
     */
    public static int totalSize_pkt() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'pkt'
     */
    public static int totalSizeBits_pkt() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'pkt'
     */
    public static int elementSize_pkt() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'pkt'
     */
    public static int elementSizeBits_pkt() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'pkt'
     */
    public static int numDimensions_pkt() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'pkt'
     */
    public static int numElements_pkt() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'pkt'
     * for the given dimension.
     */
    public static int numElements_pkt(int dimension) {
      int array_dims[] = { 2,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: isNACK
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'isNACK' is signed (false).
     */
    public static boolean isSigned_isNACK() {
        return false;
    }

    /**
     * Return whether the field 'isNACK' is an array (false).
     */
    public static boolean isArray_isNACK() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'isNACK'
     */
    public static int offset_isNACK() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'isNACK'
     */
    public static int offsetBits_isNACK() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'isNACK'
     */
    public short get_isNACK() {
        return (short)getUIntBEElement(offsetBits_isNACK(), 8);
    }

    /**
     * Set the value of the field 'isNACK'
     */
    public void set_isNACK(short value) {
        setUIntBEElement(offsetBits_isNACK(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'isNACK'
     */
    public static int size_isNACK() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'isNACK'
     */
    public static int sizeBits_isNACK() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: coeff
    //   Field type: long, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'coeff' is signed (false).
     */
    public static boolean isSigned_coeff() {
        return false;
    }

    /**
     * Return whether the field 'coeff' is an array (false).
     */
    public static boolean isArray_coeff() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'coeff'
     */
    public static int offset_coeff() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'coeff'
     */
    public static int offsetBits_coeff() {
        return 48;
    }

    /**
     * Return the value (as a long) of the field 'coeff'
     */
    public long get_coeff() {
        return (long)getUIntBEElement(offsetBits_coeff(), 32);
    }

    /**
     * Set the value of the field 'coeff'
     */
    public void set_coeff(long value) {
        setUIntBEElement(offsetBits_coeff(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'coeff'
     */
    public static int size_coeff() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'coeff'
     */
    public static int sizeBits_coeff() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ts
    //   Field type: long, unsigned
    //   Offset (bits): 80
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ts' is signed (false).
     */
    public static boolean isSigned_ts() {
        return false;
    }

    /**
     * Return whether the field 'ts' is an array (false).
     */
    public static boolean isArray_ts() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ts'
     */
    public static int offset_ts() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ts'
     */
    public static int offsetBits_ts() {
        return 80;
    }

    /**
     * Return the value (as a long) of the field 'ts'
     */
    public long get_ts() {
        return (long)getUIntBEElement(offsetBits_ts(), 32);
    }

    /**
     * Set the value of the field 'ts'
     */
    public void set_ts(long value) {
        setUIntBEElement(offsetBits_ts(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'ts'
     */
    public static int size_ts() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ts'
     */
    public static int sizeBits_ts() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nackeff
    //   Field type: short, unsigned
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nackeff' is signed (false).
     */
    public static boolean isSigned_nackeff() {
        return false;
    }

    /**
     * Return whether the field 'nackeff' is an array (false).
     */
    public static boolean isArray_nackeff() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nackeff'
     */
    public static int offset_nackeff() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nackeff'
     */
    public static int offsetBits_nackeff() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'nackeff'
     */
    public short get_nackeff() {
        return (short)getUIntBEElement(offsetBits_nackeff(), 8);
    }

    /**
     * Set the value of the field 'nackeff'
     */
    public void set_nackeff(short value) {
        setUIntBEElement(offsetBits_nackeff(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'nackeff'
     */
    public static int size_nackeff() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nackeff'
     */
    public static int sizeBits_nackeff() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: int, unsigned
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'source'
     */
    public int get_source() {
        return (int)getUIntBEElement(offsetBits_source(), 16);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(int value) {
        setUIntBEElement(offsetBits_source(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest
    //   Field type: int, unsigned
    //   Offset (bits): 136
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest' is signed (false).
     */
    public static boolean isSigned_dest() {
        return false;
    }

    /**
     * Return whether the field 'dest' is an array (false).
     */
    public static boolean isArray_dest() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dest'
     */
    public static int offset_dest() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest'
     */
    public static int offsetBits_dest() {
        return 136;
    }

    /**
     * Return the value (as a int) of the field 'dest'
     */
    public int get_dest() {
        return (int)getUIntBEElement(offsetBits_dest(), 16);
    }

    /**
     * Set the value of the field 'dest'
     */
    public void set_dest(int value) {
        setUIntBEElement(offsetBits_dest(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'dest'
     */
    public static int size_dest() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dest'
     */
    public static int sizeBits_dest() {
        return 16;
    }

}
