#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'RadioCountMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 19

# The Active Message type associated with this message.
AM_TYPE = 6

class RadioCountMsg(tinyos.message.Message.Message):
    # Create a new RadioCountMsg of size 19.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=19):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <RadioCountMsg> \n"
        try:
            s += "  [num_pkts=0x%x]\n" % (self.get_num_pkts())
        except:
            pass
        try:
            s += "  [pkt=";
            for i in range(0, 2):
                s += "0x%x " % (self.getElement_pkt(i) & 0xff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [isNACK=0x%x]\n" % (self.get_isNACK())
        except:
            pass
        try:
            s += "  [coeff=0x%x]\n" % (self.get_coeff())
        except:
            pass
        try:
            s += "  [ts=0x%x]\n" % (self.get_ts())
        except:
            pass
        try:
            s += "  [nackeff=0x%x]\n" % (self.get_nackeff())
        except:
            pass
        try:
            s += "  [source=0x%x]\n" % (self.get_source())
        except:
            pass
        try:
            s += "  [dest=0x%x]\n" % (self.get_dest())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: num_pkts
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'num_pkts' is signed (False).
    #
    def isSigned_num_pkts(self):
        return False
    
    #
    # Return whether the field 'num_pkts' is an array (False).
    #
    def isArray_num_pkts(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'num_pkts'
    #
    def offset_num_pkts(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'num_pkts'
    #
    def offsetBits_num_pkts(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'num_pkts'
    #
    def get_num_pkts(self):
        return self.getUIntElement(self.offsetBits_num_pkts(), 8, 1)
    
    #
    # Set the value of the field 'num_pkts'
    #
    def set_num_pkts(self, value):
        self.setUIntElement(self.offsetBits_num_pkts(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'num_pkts'
    #
    def size_num_pkts(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'num_pkts'
    #
    def sizeBits_num_pkts(self):
        return 8
    
    #
    # Accessor methods for field: pkt
    #   Field type: int[]
    #   Offset (bits): 8
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'pkt' is signed (False).
    #
    def isSigned_pkt(self):
        return False
    
    #
    # Return whether the field 'pkt' is an array (True).
    #
    def isArray_pkt(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'pkt'
    #
    def offset_pkt(self, index1):
        offset = 8
        if index1 < 0 or index1 >= 2:
            raise IndexError
        offset += 0 + index1 * 16
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'pkt'
    #
    def offsetBits_pkt(self, index1):
        offset = 8
        if index1 < 0 or index1 >= 2:
            raise IndexError
        offset += 0 + index1 * 16
        return offset
    
    #
    # Return the entire array 'pkt' as a int[]
    #
    def get_pkt(self):
        tmp = [None]*2
        for index0 in range (0, self.numElements_pkt(0)):
                tmp[index0] = self.getElement_pkt(index0)
        return tmp
    
    #
    # Set the contents of the array 'pkt' from the given int[]
    #
    def set_pkt(self, value):
        for index0 in range(0, len(value)):
            self.setElement_pkt(index0, value[index0])

    #
    # Return an element (as a int) of the array 'pkt'
    #
    def getElement_pkt(self, index1):
        return self.getUIntElement(self.offsetBits_pkt(index1), 16, 1)
    
    #
    # Set an element of the array 'pkt'
    #
    def setElement_pkt(self, index1, value):
        self.setUIntElement(self.offsetBits_pkt(index1), 16, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'pkt'
    #
    def totalSize_pkt(self):
        return (32 / 8)
    
    #
    # Return the total size, in bits, of the array 'pkt'
    #
    def totalSizeBits_pkt(self):
        return 32
    
    #
    # Return the size, in bytes, of each element of the array 'pkt'
    #
    def elementSize_pkt(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'pkt'
    #
    def elementSizeBits_pkt(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'pkt'
    #
    def numDimensions_pkt(self):
        return 1
    
    #
    # Return the number of elements in the array 'pkt'
    #
    def numElements_pkt():
        return 2
    
    #
    # Return the number of elements in the array 'pkt'
    # for the given dimension.
    #
    def numElements_pkt(self, dimension):
        array_dims = [ 2,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Accessor methods for field: isNACK
    #   Field type: short
    #   Offset (bits): 40
    #   Size (bits): 8
    #

    #
    # Return whether the field 'isNACK' is signed (False).
    #
    def isSigned_isNACK(self):
        return False
    
    #
    # Return whether the field 'isNACK' is an array (False).
    #
    def isArray_isNACK(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'isNACK'
    #
    def offset_isNACK(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'isNACK'
    #
    def offsetBits_isNACK(self):
        return 40
    
    #
    # Return the value (as a short) of the field 'isNACK'
    #
    def get_isNACK(self):
        return self.getUIntElement(self.offsetBits_isNACK(), 8, 1)
    
    #
    # Set the value of the field 'isNACK'
    #
    def set_isNACK(self, value):
        self.setUIntElement(self.offsetBits_isNACK(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'isNACK'
    #
    def size_isNACK(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'isNACK'
    #
    def sizeBits_isNACK(self):
        return 8
    
    #
    # Accessor methods for field: coeff
    #   Field type: long
    #   Offset (bits): 48
    #   Size (bits): 32
    #

    #
    # Return whether the field 'coeff' is signed (False).
    #
    def isSigned_coeff(self):
        return False
    
    #
    # Return whether the field 'coeff' is an array (False).
    #
    def isArray_coeff(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'coeff'
    #
    def offset_coeff(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'coeff'
    #
    def offsetBits_coeff(self):
        return 48
    
    #
    # Return the value (as a long) of the field 'coeff'
    #
    def get_coeff(self):
        return self.getUIntElement(self.offsetBits_coeff(), 32, 1)
    
    #
    # Set the value of the field 'coeff'
    #
    def set_coeff(self, value):
        self.setUIntElement(self.offsetBits_coeff(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'coeff'
    #
    def size_coeff(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'coeff'
    #
    def sizeBits_coeff(self):
        return 32
    
    #
    # Accessor methods for field: ts
    #   Field type: long
    #   Offset (bits): 80
    #   Size (bits): 32
    #

    #
    # Return whether the field 'ts' is signed (False).
    #
    def isSigned_ts(self):
        return False
    
    #
    # Return whether the field 'ts' is an array (False).
    #
    def isArray_ts(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ts'
    #
    def offset_ts(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'ts'
    #
    def offsetBits_ts(self):
        return 80
    
    #
    # Return the value (as a long) of the field 'ts'
    #
    def get_ts(self):
        return self.getUIntElement(self.offsetBits_ts(), 32, 1)
    
    #
    # Set the value of the field 'ts'
    #
    def set_ts(self, value):
        self.setUIntElement(self.offsetBits_ts(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ts'
    #
    def size_ts(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'ts'
    #
    def sizeBits_ts(self):
        return 32
    
    #
    # Accessor methods for field: nackeff
    #   Field type: short
    #   Offset (bits): 112
    #   Size (bits): 8
    #

    #
    # Return whether the field 'nackeff' is signed (False).
    #
    def isSigned_nackeff(self):
        return False
    
    #
    # Return whether the field 'nackeff' is an array (False).
    #
    def isArray_nackeff(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'nackeff'
    #
    def offset_nackeff(self):
        return (112 / 8)
    
    #
    # Return the offset (in bits) of the field 'nackeff'
    #
    def offsetBits_nackeff(self):
        return 112
    
    #
    # Return the value (as a short) of the field 'nackeff'
    #
    def get_nackeff(self):
        return self.getUIntElement(self.offsetBits_nackeff(), 8, 1)
    
    #
    # Set the value of the field 'nackeff'
    #
    def set_nackeff(self, value):
        self.setUIntElement(self.offsetBits_nackeff(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'nackeff'
    #
    def size_nackeff(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'nackeff'
    #
    def sizeBits_nackeff(self):
        return 8
    
    #
    # Accessor methods for field: source
    #   Field type: int
    #   Offset (bits): 120
    #   Size (bits): 16
    #

    #
    # Return whether the field 'source' is signed (False).
    #
    def isSigned_source(self):
        return False
    
    #
    # Return whether the field 'source' is an array (False).
    #
    def isArray_source(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'source'
    #
    def offset_source(self):
        return (120 / 8)
    
    #
    # Return the offset (in bits) of the field 'source'
    #
    def offsetBits_source(self):
        return 120
    
    #
    # Return the value (as a int) of the field 'source'
    #
    def get_source(self):
        return self.getUIntElement(self.offsetBits_source(), 16, 1)
    
    #
    # Set the value of the field 'source'
    #
    def set_source(self, value):
        self.setUIntElement(self.offsetBits_source(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'source'
    #
    def size_source(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'source'
    #
    def sizeBits_source(self):
        return 16
    
    #
    # Accessor methods for field: dest
    #   Field type: int
    #   Offset (bits): 136
    #   Size (bits): 16
    #

    #
    # Return whether the field 'dest' is signed (False).
    #
    def isSigned_dest(self):
        return False
    
    #
    # Return whether the field 'dest' is an array (False).
    #
    def isArray_dest(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'dest'
    #
    def offset_dest(self):
        return (136 / 8)
    
    #
    # Return the offset (in bits) of the field 'dest'
    #
    def offsetBits_dest(self):
        return 136
    
    #
    # Return the value (as a int) of the field 'dest'
    #
    def get_dest(self):
        return self.getUIntElement(self.offsetBits_dest(), 16, 1)
    
    #
    # Set the value of the field 'dest'
    #
    def set_dest(self, value):
        self.setUIntElement(self.offsetBits_dest(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'dest'
    #
    def size_dest(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'dest'
    #
    def sizeBits_dest(self):
        return 16
    
